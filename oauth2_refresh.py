"""
Refresh oauth2 token with `gmail.readonly` scope
"""

import os.path

import click

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow


# If modifying these scopes, delete the file token.json.
SCOPES = [
    "https://www.googleapis.com/auth/gmail.readonly"
]
DEFAULT_CREDS = "credentials.json"
DEFAULT_TOKEN = "token.json"


@click.command()
@click.option("--creds_dir", default="creds", help="Path to GCP credentials file")
@click.option("--token_dir", default="creds", help="Path to GCP credentials file")
def refresh_oauth2_token(creds_dir: str, token_dir: str) -> None:
    """Refresh oauth2 token.
    Credentials file must be named: `credentials.json`
    Writes a `token.json` to `token_dir`.

    :param creds_dir: Directory path with a `credentials.json` file, generated by https://console.cloud.google.com/apis/credentials
    :param token_dir: Directory path where a `token.json` file will be written
    """
    creds = None
    creds_full_path = os.path.join(creds_dir, DEFAULT_CREDS)
    token_full_path = os.path.join(token_dir, DEFAULT_TOKEN)

    # check if token file exists, otherwise generate one
    if os.path.exists(token_full_path):
        creds = Credentials.from_authorized_user_file(token_full_path, SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                creds_full_path, SCOPES
            )
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(token_full_path, "w") as token:
            token.write(creds.to_json())

    print(f"Token file refreshed at {token_full_path}")


if __name__ == "__main__":
    refresh_oauth2_token()
